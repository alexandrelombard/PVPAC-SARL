package simulation

/** 
 * 
 */

import io.sarl.core.Initialize

import car.ControlVirtualCarAgent

import view.SimulationViewAgent
import driver.DriverAgent
import view.SimulationView
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import utils.SpaceUtils
import environment.Environment

/** 
 * @author alombard
 * 
 */
agent Boot {
	
	uses DefaultContextInteractions, Lifecycle
	
	on Initialize {
		
		// Create global spaces
		val modelViewSpace = SpaceUtils.getOrCreateSpaceWithSpec(defaultContext, typeof(OpenEventSpaceSpecification), Spaces.MODEL_VIEW)
		val environmentSpace = SpaceUtils.getOrCreateSpaceWithSpec(defaultContext, typeof(OpenEventSpaceSpecification), Spaces.ENVIRONMENT)
		
		// Boot agents
		
		// Environment agent
		spawn(Environment)
		
		// View agent
		spawn(SimulationViewAgent)
		
		synchronized (SimulationView) {
			SimulationView.wait
		}
		
		for (var i = 0; i < 1; i++) {
			// Spawn vehicles
			val internalVehicleSpace = defaultContext.createSpace(typeof(OpenEventSpaceSpecification), UUID.randomUUID())

			spawn(DriverAgent, internalVehicleSpace)
			spawn(ControlVirtualCarAgent, internalVehicleSpace)
			
			Thread.sleep(5000)
		}
		
		killMe
	}
}
