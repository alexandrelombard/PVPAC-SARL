/** 
 * 
 */
package environment

import io.sarl.core.AgentSpawned
import car.ControlVirtualCarAgent
import io.sarl.core.AgentKilled
import java.util.HashMap
import java.util.UUID
import model.VirtualCar
import io.sarl.core.Initialize
import io.sarl.util.OpenEventSpace
import io.sarl.core.Behaviors
import car.events.PositionChanged
import io.sarl.core.Logging
import utils.SpaceUtils
import simulation.Spaces
import io.sarl.core.DefaultContextInteractions
import io.sarl.util.OpenEventSpaceSpecification

/** 
 * @author alombard
 * 
 */
agent Environment {
	
	uses Behaviors, DefaultContextInteractions, Logging
	
	private val environment = new HashMap<UUID, EnvironmentObject>()
	
	private var environmentSpace : OpenEventSpace
	
	on Initialize {		
		this.environmentSpace = SpaceUtils.getOrCreateSpaceWithSpec(defaultContext, typeof(OpenEventSpaceSpecification), Spaces.ENVIRONMENT)
		this.environmentSpace.register(asEventListener())
	}
	
	on AgentSpawned [occurrence.agentType === ControlVirtualCarAgent.typeName] {
		// TODO Schedule generation of perceptions
		// TODO Replace agent spawned event references to agent joined (environment space) event references
	}

	on AgentKilled [occurrence.agentType === ControlVirtualCarAgent.typeName] {
		
	}
	
	on PositionChanged {
		val id = occurrence.source.UUID
	}
}
