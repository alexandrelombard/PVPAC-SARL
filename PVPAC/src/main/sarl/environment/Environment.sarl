/** 
 * 
 */
package environment

import io.sarl.core.AgentSpawned
import car.ControlVirtualCarAgent
import io.sarl.core.AgentKilled
import java.util.HashMap
import java.util.UUID
import model.VirtualCar
import io.sarl.core.Initialize
import io.sarl.util.OpenEventSpace
import io.sarl.core.Behaviors
import car.events.PositionChanged
import io.sarl.core.Logging
import utils.SpaceUtils
import simulation.Spaces
import io.sarl.core.DefaultContextInteractions
import io.sarl.util.OpenEventSpaceSpecification
import car.events.SpeedChanged
import java.util.concurrent.ConcurrentHashMap
import model.geom.Point2d

/** 
 * @author alombard
 * 
 */
agent Environment {
	
	uses Behaviors, DefaultContextInteractions, Logging
	
	private val environment = new ConcurrentHashMap<UUID, EnvironmentObject>()
	
	private var environmentSpace : OpenEventSpace
	
	on Initialize {		
		this.environmentSpace = SpaceUtils.getOrCreateSpaceWithSpec(defaultContext, typeof(OpenEventSpaceSpecification), Spaces.ENVIRONMENT)
		this.environmentSpace.register(asEventListener())

		// TODO Schedule generation of perceptions
	}
	
	on PositionChanged {
		val id = occurrence.source.UUID
		
		if(environment.containsKey(id)) {
			environment.put(id, new EnvironmentObject(occurrence.position, environment.get(id).speed))
		} else {
			environment.put(id, new EnvironmentObject(occurrence.position, 0))
		}
	}
	
	on SpeedChanged {
		val id = occurrence.source.UUID
		
		if(environment.containsKey(id)) {
			environment.put(id, new EnvironmentObject(environment.get(id).position, occurrence.speed))
		} else {
			environment.put(id, new EnvironmentObject(new Point2d(Double.NaN, Double.NaN), occurrence.speed))
		}
	}
}
