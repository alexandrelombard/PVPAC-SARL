/** 
 * 
 */
package driver

import java.util.ArrayList

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize

import car.capacities.control.AccelerationControlChange
import car.capacities.control.SteeringWheelControlChange
import car.events.PositionChanged
import car.events.SpeedChanged
import driver.capacities.CruiseControl
import driver.capacities.FollowTrack
import driver.capacities.MapMatching
import model.map.Track
import model.geom.Point2d
import model.map.ProjectionModel
import driver.behaviors.FollowTrackBehavior
import io.sarl.core.Behaviors
import io.sarl.lang.core.Space
import io.sarl.util.OpenEventSpace

/** 
 * @author alombard
 * 
 */
agent DriverAgent {
	
	uses Behaviors
	
	private var track : Track

	private var internalVehicleSpace : OpenEventSpace
	
	on Initialize {
		// Check parameters
		if(occurrence.parameters.size < 1 || !(occurrence.parameters.get(0) instanceof OpenEventSpace)) {
			throw new IllegalArgumentException("First argument must be of type OpenEventSpace (internal vehicle space)")
		}
		
		// Register to appropriate spaces
		occurrence.parameters.forEach[o|if (o instanceof OpenEventSpace) o.register(asEventListener())]
		
		// Initialize spaces
		this.internalVehicleSpace = occurrence.parameters.get(0) as OpenEventSpace
		
		// Initialize skills
		setSkill(new DefaultMapMatching, MapMatching)
		setSkill(new ImprovedPurePursuit, FollowTrack)
		setSkill(new DefaultCruiseControl, CruiseControl)
	
		// Initialize track
		val points = new ArrayList<Point2d>();
		points.add(new Point2d(0, 160))
		points.add(new Point2d(4000, 160))
		
		this.track = new Track("track", ProjectionModel.LAMBERT2E, points)
		
		// Initialize behavior
		val followTrackBehavior = new FollowTrackBehavior(this, this.internalVehicleSpace, this.track)
		
		registerBehavior(followTrackBehavior)
	}
}
